let constants,getAccounts,getAccountByEmail,removeAccounts,getAccountByAccNo,addAccount,editAccount,getAccountByIs,message,mongoose;_cf9‍.x([["searchController",()=>searchController],["removeController",()=>removeController],["addController",()=>addController],["editController",()=>editController],["authorFunction",()=>authorFunction]]);_cf9‍.w("./../helpers/constant",[["constants",["constants"],function(v){constants=v}],["message",["message"],function(v){message=v}]]);_cf9‍.w("./../service/accounts.service",[["getAccounts",["getAccounts"],function(v){getAccounts=v}],["getAccountByEmail",["getAccountByEmail"],function(v){getAccountByEmail=v}],["removeAccounts",["removeAccounts"],function(v){removeAccounts=v}],["getAccountByAccNo",["getAccountByAccNo"],function(v){getAccountByAccNo=v}],["addAccount",["addAccount"],function(v){addAccount=v}],["editAccount",["editAccount"],function(v){editAccount=v}],["getAccountByIs",["getAccountByIs"],function(v){getAccountByIs=v}]]);_cf9‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);




       const searchController = async (req, res) => {
    try {
        let page = req.query.page || constants.DEFAULT_PAGE
        let limit = req.query.limit || constants.DEFAULT_LIMIT
        // let query = req.body.query;
        let query = {}
        const lstAccounts = await getAccounts(query, limit, page);
        return res.json({
            result: true,
            lstAccounts
        })
    } catch (error) {
        _cf9‍.g.console.log(error)
        return res.json({ result: false, message: message.MSG0000, status: 0 })
    }
}

       const removeController = async (req, res) => {
    try {
        const id = req.params.id;
        const acc = await getAccountByIs({ _id: mongoose.Types.ObjectId(id) });
        if (!acc) {
            return res.json({ result: false, message: message.MSG002 })
        }
        const result = await removeAccounts({ _id: mongoose.Types.ObjectId(id) })
        if (!result) {
            return res.json({ result: false, message: message.MSG003 })
        }
        return res.json({
            result: true,
            message: message.MSG004
        })
    } catch (error) {
        _cf9‍.g.console.log(error)
        return res.json({ result: false, message: message.MSG0000, status: 0 })
    }
}

       const addController = async (req, res) => {
    try {
        const email = req.body.email;
        const account_number = req.body.account_number;
        const accByEmail = await getAccountByEmail({ email });
        const accByAccNo = await getAccountByAccNo({ account_number });
        if (accByEmail) {
            return res.json({ result: false, message: message.MSG008 })
        }
        if (accByAccNo) {
            return res.json({ result: false, message: message.MSG009 })
        }
        const result = await addAccount(req.body)
        if (!result) {
            return res.json({ result: false, message: message.MSG002 })
        }
        return res.json({
            result: true,
            message: message.MSG0010
        })
    } catch (error) {
        _cf9‍.g.console.log(error)
        return res.json({ result: false, message: message.MSG0000, status: 0 })
    }
}

       const editController = async (req, res) => {
    try {
        const id = req.params.id;
        const email = req.body.email;
        const account_number = req.body.account_number;
        const accByEmail = await getAccountByEmail({ email });
        const accByAccNo = await getAccountByAccNo({ account_number });
        if (accByEmail) {
            return res.json({ result: false, message: message.MSG005 })
        }
        if (accByAccNo) {
            return res.json({ result: false, message: message.MSG006 })
        }
        const result = await editAccount(req.body)
        if (!result) {
            return res.json({ result: false, message: message.MSG002 })
        }
        return res.json({
            result: true,
            message: message.MSG007
        })
    } catch (error) {
        _cf9‍.g.console.log(error)
        return res.json({ result: false, message: message.MSG0000, status: 0 })
    }
}

       const authorFunction = async (data, req, res, nex) => {
    _cf9‍.g.console.log('data', data);
    _cf9‍.g.console.log(req.user);
    _cf9‍.g.console.log('data', req.user);


}
