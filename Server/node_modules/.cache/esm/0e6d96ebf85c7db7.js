let mongoose,Schema,lstAccountBanks;_f85‍.x([["default",()=>_f85‍.o]]);_f85‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_f85‍.w("../data/accounts",[["lstAccountBanks",["lstAccountBanks"],function(v){lstAccountBanks=v}]]);



const accountSchema = new Schema({
    email: {
        type: String,
        required: true,
    },
    name: {
        type: String,
        required: true,
    },
    address: {
        type: String,
        required: true,
    },
    gender: {
        type: Number,
        enum: [0, 1],
        default: 0,
        required: true,
    },
    age: {
        type: Number,
        required: true,
    },
    dob: {
        type: Date,
        required: true,
    },
    account_number: {
        type: String,
        required: true,
    },
    phone_number: {
        type: String,
        required: true,
    },
    balance: {
        type: Number,
        required: true,
    },
    del_flag: {
        type: Number,
        enum: [0, 1],
        default: 0,
        required: true,
    },
})

const Account = mongoose.model('accounts', accountSchema)

_f85‍.d(Account);

Promise.all(
    lstAccountBanks.map((item) => {
        const query = { account_number: item.account_number };
        const update = item;
        const option = {
            upsert: true,
            new: true,
            setDefaultsOnInsert: true
        }
        Account.findOneAndUpdate(query, update, option, function (err, res) {
        })
    })
)