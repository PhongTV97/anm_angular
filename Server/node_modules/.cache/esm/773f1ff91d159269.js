let Accounts;_1d1‍.x([["getAccounts",()=>getAccounts],["addAccount",()=>addAccount],["editAccount",()=>editAccount],["getAccountByEmail",()=>getAccountByEmail],["getAccountByAccNo",()=>getAccountByAccNo],["removeAccounts",()=>removeAccounts],["getAccountByIs",()=>getAccountByIs]]);_1d1‍.w("./../models/accounts",[["default",["Accounts"],function(v){Accounts=v}]]);

       const getAccounts = async (query, limit, page) => {
    const skip = (page - 1) * limit;
    let account = await Accounts.find().limit(limit).skip(skip);
    return account
}

       const addAccount = async (account) => {
    const acc = await Accounts.insertOne(account);
    if (!acc) {
        return false
    }
    return true
}

       const editAccount = async (account) => {
    const acc = await Accounts.updateOne(account);
    if (!acc) {
        return false
    }
    return true
}

       const getAccountByEmail = async (query) => {
    const acc = await Accounts.findOne(query);
    if (!acc) {
        return false
    }
    return acc
}

       const getAccountByAccNo = async (query) => {
    const acc = await Accounts.findOne(query);
    if (!acc) {
        return false
    }
    return acc
}

       const removeAccounts = async (id) => {
    const res = await Accounts.deleteOne(id);
    if (!res) {
        return false;
    }
    return true;
}

       const getAccountByIs = async (query) => {
    const acc = await Accounts.findOne(query);
    if (!acc) {
        return false
    }
    return acc
}